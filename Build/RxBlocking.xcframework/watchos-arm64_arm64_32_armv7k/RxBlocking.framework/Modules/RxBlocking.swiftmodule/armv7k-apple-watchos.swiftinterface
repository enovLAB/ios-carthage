// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target armv7k-apple-watchos3.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name RxBlocking
import CoreFoundation
import Darwin
import Foundation
import RxSwift
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct BlockingObservable<Element> {
}
@frozen public enum MaterializedSequenceResult<T> {
  case completed(elements: [T])
  case failed(elements: [T], error: any Swift.Error)
}
extension RxBlocking.BlockingObservable {
  public func toArray() throws -> [Element]
}
extension RxBlocking.BlockingObservable {
  public func first() throws -> Element?
}
extension RxBlocking.BlockingObservable {
  public func last() throws -> Element?
}
extension RxBlocking.BlockingObservable {
  public func single() throws -> Element
  public func single(_ predicate: @escaping (Element) throws -> Swift.Bool) throws -> Element
}
extension RxBlocking.BlockingObservable {
  public func materialize() -> RxBlocking.MaterializedSequenceResult<Element>
}
extension RxSwift.ObservableConvertibleType {
  public func toBlocking(timeout: Foundation.TimeInterval? = nil) -> RxBlocking.BlockingObservable<Self.Element>
}
